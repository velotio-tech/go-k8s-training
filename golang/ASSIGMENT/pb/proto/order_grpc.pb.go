// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/order.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderManagementClient is the client API for OrderManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderManagementClient interface {
	GetOrder(ctx context.Context, in *OrderGetRequest, opts ...grpc.CallOption) (*OrderGetResponse, error)
	GetOrders(ctx context.Context, in *OrdersGetRequest, opts ...grpc.CallOption) (*OrdersGetResponse, error)
	CreateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*OrderCreateResponse, error)
	DeleteOrder(ctx context.Context, in *DeleteOrderByOrderIDRequest, opts ...grpc.CallOption) (*DeleteOrderByOrderIDResponse, error)
	DeleteOrders(ctx context.Context, in *DeleteOrdersByBuyerIDRequest, opts ...grpc.CallOption) (*DeleteOrdersByBuyerIDResponse, error)
}

type orderManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderManagementClient(cc grpc.ClientConnInterface) OrderManagementClient {
	return &orderManagementClient{cc}
}

func (c *orderManagementClient) GetOrder(ctx context.Context, in *OrderGetRequest, opts ...grpc.CallOption) (*OrderGetResponse, error) {
	out := new(OrderGetResponse)
	err := c.cc.Invoke(ctx, "/OrderManagement/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderManagementClient) GetOrders(ctx context.Context, in *OrdersGetRequest, opts ...grpc.CallOption) (*OrdersGetResponse, error) {
	out := new(OrdersGetResponse)
	err := c.cc.Invoke(ctx, "/OrderManagement/GetOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderManagementClient) CreateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*OrderCreateResponse, error) {
	out := new(OrderCreateResponse)
	err := c.cc.Invoke(ctx, "/OrderManagement/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderManagementClient) DeleteOrder(ctx context.Context, in *DeleteOrderByOrderIDRequest, opts ...grpc.CallOption) (*DeleteOrderByOrderIDResponse, error) {
	out := new(DeleteOrderByOrderIDResponse)
	err := c.cc.Invoke(ctx, "/OrderManagement/DeleteOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderManagementClient) DeleteOrders(ctx context.Context, in *DeleteOrdersByBuyerIDRequest, opts ...grpc.CallOption) (*DeleteOrdersByBuyerIDResponse, error) {
	out := new(DeleteOrdersByBuyerIDResponse)
	err := c.cc.Invoke(ctx, "/OrderManagement/DeleteOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderManagementServer is the server API for OrderManagement service.
// All implementations must embed UnimplementedOrderManagementServer
// for forward compatibility
type OrderManagementServer interface {
	GetOrder(context.Context, *OrderGetRequest) (*OrderGetResponse, error)
	GetOrders(context.Context, *OrdersGetRequest) (*OrdersGetResponse, error)
	CreateOrder(context.Context, *Order) (*OrderCreateResponse, error)
	DeleteOrder(context.Context, *DeleteOrderByOrderIDRequest) (*DeleteOrderByOrderIDResponse, error)
	DeleteOrders(context.Context, *DeleteOrdersByBuyerIDRequest) (*DeleteOrdersByBuyerIDResponse, error)
	mustEmbedUnimplementedOrderManagementServer()
}

// UnimplementedOrderManagementServer must be embedded to have forward compatible implementations.
type UnimplementedOrderManagementServer struct {
}

func (UnimplementedOrderManagementServer) GetOrder(context.Context, *OrderGetRequest) (*OrderGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedOrderManagementServer) GetOrders(context.Context, *OrdersGetRequest) (*OrdersGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}
func (UnimplementedOrderManagementServer) CreateOrder(context.Context, *Order) (*OrderCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedOrderManagementServer) DeleteOrder(context.Context, *DeleteOrderByOrderIDRequest) (*DeleteOrderByOrderIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrder not implemented")
}
func (UnimplementedOrderManagementServer) DeleteOrders(context.Context, *DeleteOrdersByBuyerIDRequest) (*DeleteOrdersByBuyerIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrders not implemented")
}
func (UnimplementedOrderManagementServer) mustEmbedUnimplementedOrderManagementServer() {}

// UnsafeOrderManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderManagementServer will
// result in compilation errors.
type UnsafeOrderManagementServer interface {
	mustEmbedUnimplementedOrderManagementServer()
}

func RegisterOrderManagementServer(s grpc.ServiceRegistrar, srv OrderManagementServer) {
	s.RegisterService(&OrderManagement_ServiceDesc, srv)
}

func _OrderManagement_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderManagementServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderManagement/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderManagementServer).GetOrder(ctx, req.(*OrderGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderManagement_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderManagementServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderManagement/GetOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderManagementServer).GetOrders(ctx, req.(*OrdersGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderManagement_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderManagementServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderManagement/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderManagementServer).CreateOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderManagement_DeleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderByOrderIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderManagementServer).DeleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderManagement/DeleteOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderManagementServer).DeleteOrder(ctx, req.(*DeleteOrderByOrderIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderManagement_DeleteOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrdersByBuyerIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderManagementServer).DeleteOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrderManagement/DeleteOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderManagementServer).DeleteOrders(ctx, req.(*DeleteOrdersByBuyerIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderManagement_ServiceDesc is the grpc.ServiceDesc for OrderManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OrderManagement",
	HandlerType: (*OrderManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrder",
			Handler:    _OrderManagement_GetOrder_Handler,
		},
		{
			MethodName: "GetOrders",
			Handler:    _OrderManagement_GetOrders_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _OrderManagement_CreateOrder_Handler,
		},
		{
			MethodName: "DeleteOrder",
			Handler:    _OrderManagement_DeleteOrder_Handler,
		},
		{
			MethodName: "DeleteOrders",
			Handler:    _OrderManagement_DeleteOrders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/order.proto",
}
